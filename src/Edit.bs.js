// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Phoneme$Phonics = require("./Phoneme.bs.js");

var initialState = {
  phonemes: /* :: */[
    Phoneme$Phonics.firstPhoneme,
    /* [] */0
  ]
};

function str(prim) {
  return prim;
}

function findAfter(element, list) {
  return List.fold_right((function (current, accumulator) {
                if (Caml_obj.caml_equal(current, element)) {
                  return {
                          list: accumulator.list,
                          found: true
                        };
                } else if (accumulator.found) {
                  return accumulator;
                } else {
                  return {
                          list: /* :: */[
                            current,
                            accumulator.list
                          ],
                          found: accumulator.found
                        };
                }
              }), list, {
              list: /* [] */0,
              found: false
            }).list;
}

function findBefore(element, list) {
  var result = List.fold_left((function (accumulator, current) {
          if (current.sound === element.sound) {
            return {
                    list: accumulator.list,
                    found: true
                  };
          } else if (accumulator.found) {
            return accumulator;
          } else {
            return {
                    list: /* :: */[
                      current,
                      accumulator.list
                    ],
                    found: accumulator.found
                  };
          }
        }), {
        list: /* [] */0,
        found: false
      }, list);
  return List.rev(result.list);
}

function selectPhoneme(index, phoneme, list) {
  return List.mapi((function (i, element) {
                var match = i === index;
                if (match) {
                  return phoneme;
                } else {
                  return element;
                }
              }), list);
}

function reducer(state, action) {
  if (typeof action === "number") {
    if (action !== 0) {
      return {
              phonemes: List.rev(List.tl(List.rev(state.phonemes)))
            };
    } else {
      return {
              phonemes: Pervasives.$at(state.phonemes, /* :: */[
                    Phoneme$Phonics.firstPhoneme,
                    /* [] */0
                  ])
            };
    }
  } else {
    return {
            phonemes: selectPhoneme(action[0], action[1], state.phonemes)
          };
  }
}

function Edit(Props) {
  var state = Props.state;
  var dispatch = Props.dispatch;
  var onViewButtonClicked = Props.onViewButtonClicked;
  var Edit$1 = function (Props) {
    var phoneme = Props.selectedPhoneme;
    var index = Props.index;
    var before = findBefore(phoneme, Phoneme$Phonics.phonemes);
    var after = findAfter(phoneme, Phoneme$Phonics.phonemes);
    return React.createElement("div", {
                className: "phoneme-selector"
              }, React.createElement("div", {
                    className: "before"
                  }, $$Array.of_list(List.mapi((function (beforeIndex, beforePhoneme) {
                              return React.createElement(Phoneme$Phonics.make, {
                                          phoneme: beforePhoneme,
                                          onClick: (function (param) {
                                              return Curry._1(dispatch, /* PhonemeClicked */[
                                                          index,
                                                          beforePhoneme
                                                        ]);
                                            }),
                                          key: String(beforeIndex)
                                        });
                            }), before))), React.createElement("div", {
                    className: "selected"
                  }, React.createElement(Phoneme$Phonics.make, {
                        phoneme: phoneme
                      })), React.createElement("div", {
                    className: "after"
                  }, $$Array.of_list(List.mapi((function (afterIndex, afterPhoneme) {
                              return React.createElement(Phoneme$Phonics.make, {
                                          phoneme: afterPhoneme,
                                          onClick: (function (param) {
                                              return Curry._1(dispatch, /* PhonemeClicked */[
                                                          index,
                                                          afterPhoneme
                                                        ]);
                                            }),
                                          key: String(afterIndex)
                                        });
                            }), after))));
  };
  var Edit$2 = function (Props) {
    var phonemes = Props.phonemes;
    return React.createElement("div", {
                className: "phonemes"
              }, $$Array.of_list(List.mapi((function (index, selectedPhoneme) {
                          return React.createElement(Edit$1, {
                                      selectedPhoneme: selectedPhoneme,
                                      index: index,
                                      key: String(index)
                                    });
                        }), phonemes)), React.createElement("button", {
                    className: "remove-phoneme",
                    onClick: (function (_evt) {
                        return Curry._1(dispatch, /* RemovePhoneme */1);
                      })
                  }, "-"), React.createElement("button", {
                    className: "add-phoneme",
                    onClick: (function (_evt) {
                        return Curry._1(dispatch, /* AddPhoneme */0);
                      })
                  }, "+"));
  };
  return React.createElement("div", {
              className: "edit"
            }, React.createElement(Edit$2, {
                  phonemes: state.phonemes
                }), React.createElement("button", {
                  className: "edit-button",
                  onClick: (function (_evt) {
                      return Curry._1(onViewButtonClicked, /* () */0);
                    })
                }, "Play"));
}

var make = Edit;

exports.initialState = initialState;
exports.str = str;
exports.findAfter = findAfter;
exports.findBefore = findBefore;
exports.selectPhoneme = selectPhoneme;
exports.reducer = reducer;
exports.make = make;
/* react Not a pure module */
